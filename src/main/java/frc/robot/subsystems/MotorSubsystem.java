// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.devices.SteeringMotor;
import frc.robot.exceptions.MotorSetupException;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.*;
import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
import com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;
import java.util.HashMap;
import java.util.Iterator;



/**
 *
 */
public class MotorSubsystem extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private HashMap<String, SteeringMotor> m_motors;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public MotorSubsystem(HashMap<String, SteeringMotor> motors) {
        m_motors = motors;
    //    m_motors = new HashMap<String, TalonFX>();

        //motors.put("1",new TalonFX(16));
    //    motors.put("2",new TalonFX(2));

    /*     Iterator<TalonFX> iter = m_motors.values().iterator();

        while(iter.hasNext()) {
            fx = iter.next();
            fx.configFactoryDefault();
    
            fx.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor, 0, 30);
            fx.setSensorPhase(true);
            fx.configNominalOutputForward(0, 30);
            fx.configNominalOutputReverse(0, 30);
            fx.configPeakOutputForward(0.1,30);
            fx.configPeakOutputReverse(-0.1,30);
            fx.configAllowableClosedloopError(0, 0, 30);
            fx.config_kF(0, 0, 30);
            fx.config_kP(0, SmartDashboard.getNumber("config_kP", 1), 30);
            fx.config_kI(0, 0, 30);
            fx.config_kD(0, SmartDashboard.getNumber("config_kP", 8), 30);
            
        }*/
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    public Boolean initialize() {
        try {
            Iterator<SteeringMotor> iter = m_motors.values().iterator();

            SteeringMotor m;
            while(iter.hasNext()) {
                m = iter.next();
                m.initialize();
            }
        } catch(MotorSetupException mse) {
            System.out.println(mse.getMessage());
            return false;
        }

        return true;
    }

    public Boolean isSteppingCompleted() {
        return true;
        /*TalonFX fx;
        Iterator<TalonFX> iter = motors.values().iterator();

        // Check the closed-loop error, one within a threshold, command the next 
        while(iter.hasNext()) {
            fx = iter.next();
            if(fx.getClosedLoopError(0) > 0) {
                return false;
            }
        }

        return true;*/
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void driveToStep(int step) {
        Iterator<SteeringMotor> iter = m_motors.values().iterator();
        double kp, kD;

        kp = SmartDashboard.getNumber("Position: config_kP", 1);
        kD = SmartDashboard.getNumber("Position: config_kD", 8);

        System.out.println(step + ", " + kp + ", " + kD);
        
        SteeringMotor m;

        iter = m_motors.values().iterator();
        while(iter.hasNext()) {
            m = iter.next();

            m.config_kP(0, kp, 30);
            m.config_kI(0, 0, 30);
            m.config_kD(0, kD, 30);


            m.set(TalonFXControlMode.Position, step);
            //fx.setSelectedSensorPosition(step);
        }
    }
}

